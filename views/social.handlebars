<html>
<head>
  <title>
    Social Network App
  </title>
</head>
<body>

<div id="fb-root"></div>


<script type="text/javascript">

var array = [];
var temp = {};

var graphNode;

var loggedin = false;
giantLogin(graphNode);

function giantLogin(graphParam) {
  window.fbAsyncInit = function() {
  FB.init({
    appId      : 608436179247204,
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true  // parse XFBML
  });

  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      // The response object is returned with a status field that lets the app know the current
      // login status of the person. In this case, we're handling the situation where they 
      // have logged in to the app.

      var node = testAPI();
      graphParam = node;
console.log("this is node: " + node)
      return node;



    } else if (response.status === 'not_authorized') {
      // In this case, the person is logged into Facebook, but not into the app, so we call
      // FB.login() to prompt them to do so. 
      // In real-life usage, you wouldn't want to immediately prompt someone to login 
      // like this, for two reasons:
      // (1) JavaScript created popup windows are blocked by most browsers unless they 
      // result from direct interaction from people using the app (such as a mouse click)
      // (2) it is a bad experience to be continually prompted to login upon page load.
      FB.login();
    } else {
      // In this case, the person is not logged into Facebook, so we call the login() 
      // function to prompt them to do so. Note that at this stage there is no indication
      // of whether they are logged into the app. If they aren't then they'll see the Login
      // dialog right after they log in to Facebook. 
      // The same caveats as above apply to the FB.login() call here.
      FB.login();
    }
  });
  };
}

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = id; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);

  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 

  // added



  function testAPI() {

    loggedin = true;
    console.log('Welcome!  Fetching your information.... ');


    FB.api('/me', function(response) {
      console.log('Good to see you, ' + response.name + '.');
             console.log('Good to see you, ' + response.email + '.');
             console.log('Good to see you, ' + response.id + '.');
             console.log(response);

             var returnedObj = {};
             returnedObj = testing(response);

             console.log("this is returned obj" + returnedObj)
             return returnedObj;
console.log("TESTING");
             response.name;

             tempJSON = {};




              graph.get("/me", function(err, res) {
    //Store user data after stringfying it
    var data = JSON.stringify(res);
    //Log returned data
    console.log("MY DATA!!!!!!!!!!!!!!!!!!!!!!!!! " + data);
    });





    });



  }

  function testing(response) {
  console.log("response" + response);
  console.log(response);

  FB.api('/'+response.id, function(response2) {
      console.log(response2);
      console.log(response2.birthday);

array.push(response2.birthday);
temp.birthday = response2.birthday;
console.log("temp: " + temp.birthday);

console.log("length of array " + array.length);
console.log("this is temp!! " + temp.birthday);

return temp.birthday;
    });

  console.log("length of array NOW " + array.length);
return temp.birthday;

  }


document.write(graphNode);

console.log("length of array THE END" + array.length);

console.log("temp: " + temp.birthday);


</script>

<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked. -->

<fb:login-button show-faces="true" width="200" max-rows="1" scope="email, user_birthday,user_likes, user_groups, user_photos"></fb:login-button>



{{#each temp}}
<p>{{birthday}}</p>
{{/each}}

</body>
</html>